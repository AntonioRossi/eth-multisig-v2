// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"amount","type":"uint256"}],"name":"sendCoin","outputs":[{"name":"sufficient","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"},{"name":"signature","type":"bytes"}],"name":"verifySignature","outputs":[{"name":"retAddr","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"verify","outputs":[{"name":"retAddr","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"signer","type":"address"},{"name":"signedData","type":"string"},{"name":"signature","type":"string"}],"name":"checkSignature","outputs":[{"name":"intermediary","type":"string"}],"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"inputs":[],"type":"constructor"}],
    binary: "6060604052600160a060020a033216600090815260208190526040902061271090556103298061002f6000396000f3606060405260e060020a600035046390b98a118114610047578063daca6f7814610076578063f1835db7146100d4578063f77d189114610124578063f8b2cb4f146101f0575b005b61020c60043560243533600160a060020a0316600090815260208190526040812054829010156102a1576102c4565b6080602060248035600481810135601f8101859004909402850160405260608481526102169582359592946044949293920191908190838280828437509496505050505050506000600060006000845160411415156102ca57610320565b610216600435602435604435606435606084815260ff8416608090815260a084905260c083905260009160019160e0916020918186866161da5a03f1156100025750506040515195945050505050565b6080602060248035600481810135601f810185900490940285016040526060848152610233958235959294604494929392019190819083828082843750506040805160209735808a0135601f81018a90048a0283018a01909352828252969897606497919650602491909101945090925082915084018382808284375050604080516020818101835260009091528151808301909252600982527f676f6464616d6d69740000000000000000000000000000000000000000000000908201529998505050505050505050565b600160a060020a03600435166000908152602081905260409020545b6060908152602090f35b60408051600160a060020a03929092168252519081900360200190f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b604080822080548490039055600160a060020a0384168252902080548201905560015b92915050565b5050604080516080805160a05160a15189855260ff166020858101829052858701849052858a018390529551929650909490936001938181019391829003018189866161da5a03f1156100025750506040515193505b5050509291505056",
    unlinked_binary: "6060604052600160a060020a033216600090815260208190526040902061271090556103298061002f6000396000f3606060405260e060020a600035046390b98a118114610047578063daca6f7814610076578063f1835db7146100d4578063f77d189114610124578063f8b2cb4f146101f0575b005b61020c60043560243533600160a060020a0316600090815260208190526040812054829010156102a1576102c4565b6080602060248035600481810135601f8101859004909402850160405260608481526102169582359592946044949293920191908190838280828437509496505050505050506000600060006000845160411415156102ca57610320565b610216600435602435604435606435606084815260ff8416608090815260a084905260c083905260009160019160e0916020918186866161da5a03f1156100025750506040515195945050505050565b6080602060248035600481810135601f810185900490940285016040526060848152610233958235959294604494929392019190819083828082843750506040805160209735808a0135601f81018a90048a0283018a01909352828252969897606497919650602491909101945090925082915084018382808284375050604080516020818101835260009091528151808301909252600982527f676f6464616d6d69740000000000000000000000000000000000000000000000908201529998505050505050505050565b600160a060020a03600435166000908152602081905260409020545b6060908152602090f35b60408051600160a060020a03929092168252519081900360200190f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b604080822080548490039055600160a060020a0384168252902080548201905560015b92915050565b5050604080516080805160a05160a15189855260ff166020858101829052858701849052858a018390529551929650909490936001938181019391829003018189866161da5a03f1156100025750506040515193505b5050509291505056",
    address: "0x6e6f74bc48ebda1bbd311f96e057156525cb62a1",
    generated_with: "2.0.9",
    contract_name: "MetaCoin"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.MetaCoin = Contract;
  }

})();
